// Replace the imports at the top of CourseRecommendations.jsx
import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  Chip,
  Button,
  CircularProgress,
  Alert,
  Grid,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Paper
} from '@mui/material';
import {
  ExpandMore,
  School,
  PriorityHigh,  // Changed from Priority to PriorityHigh
  AutoAwesome,
  CheckCircle,
  Warning,       // Added Warning icon
  Info          // Added Info icon
} from '@mui/icons-material';
import aiService from '../../services/aiService';
import { useAuth } from '../../context/AuthContext';

const CourseRecommendations = ({ completedCourses = [], userProfile = {} }) => {
  const [recommendations, setRecommendations] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const { user } = useAuth();

  const fetchRecommendations = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await aiService.getCourseRecommendations(
        userProfile,
        completedCourses,
        'Fall 2025'
      );
      
      if (result.error) {
        setError(result.error);
      } else {
        setRecommendations(result);
      }
    } catch (err) {
      setError('Failed to fetch recommendations');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user) {
      fetchRecommendations();
    }
  }, [completedCourses, userProfile, user]);

  const getPriorityColor = (priority) => {
    switch (priority?.toLowerCase()) {
      case 'high': return 'error';
      case 'medium': return 'warning';
      case 'low': return 'success';
      default: return 'default';
    }
  };

  const getPriorityIcon = (priority) => {
    switch (priority?.toLowerCase()) {
      case 'high': return <Priority color="error" />;
      case 'medium': return <School color="warning" />;
      case 'low': return <CheckCircle color="success" />;
      default: return <School />;
    }
  };

  if (loading) {
    return (
      <Card>
        <CardContent>
          <Box display="flex" justifyContent="center" alignItems="center" py={4}>
            <CircularProgress />
            <Typography variant="h6" sx={{ ml: 2 }}>
              AI is analyzing your academic progress...
            </Typography>
          </Box>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent>
          <Alert severity="error" action={
            <Button color="inherit" size="small" onClick={fetchRecommendations}>
              Retry
            </Button>
          }>
            {error}
          </Alert>
        </CardContent>
      </Card>
    );
  }

  if (!recommendations) {
    return (
      <Card>
        <CardContent>
          <Box textAlign="center" py={4}>
            <AutoAwesome sx={{ fontSize: 48, color: 'primary.main', mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              AI Course Recommendations
            </Typography>
            <Typography color="text.secondary" paragraph>
              Get personalized course suggestions based on your academic progress and career goals.
            </Typography>
            <Button variant="contained" onClick={fetchRecommendations}>
              Get AI Recommendations
            </Button>
          </Box>
        </CardContent>
      </Card>
    );
  }

  return (
    <Box>
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box display="flex" alignItems="center" mb={2}>
            <AutoAwesome sx={{ mr: 1, color: 'primary.main' }} />
            <Typography variant="h5">
              AI-Powered Course Recommendations
            </Typography>
          </Box>
          
          <Alert severity="info" sx={{ mb: 2 }}>
            These recommendations are generated by AI based on your academic progress and CIS curriculum requirements.
          </Alert>

          {/* Next Semester Recommendations */}
          <Typography variant="h6" gutterBottom sx={{ mt: 3 }}>
            Recommended for Next Semester
          </Typography>
          
          <Grid container spacing={2}>
            {recommendations.nextSemesterCourses?.map((course, index) => (
              <Grid item xs={12} md={6} key={index}>
                <Paper elevation={2} sx={{ p: 2, height: '100%' }}>
                  <Box display="flex" alignItems="flex-start" mb={1}>
                    {getPriorityIcon(course.priority)}
                    <Box ml={1} flex={1}>
                      <Typography variant="subtitle1" fontWeight="bold">
                        {course.courseCode}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {course.courseName}
                      </Typography>
                    </Box>
                    <Chip 
                      label={course.priority} 
                      size="small" 
                      color={getPriorityColor(course.priority)}
                    />
                  </Box>
                  
                  <Typography variant="body2" paragraph>
                    {course.reason}
                  </Typography>
                  
                  {course.prerequisites && course.prerequisites.length > 0 && (
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        Prerequisites:
                      </Typography>
                      <Box display="flex" flexWrap="wrap" gap={0.5} mt={0.5}>
                        {course.prerequisites.map((prereq, i) => (
                          <Chip key={i} label={prereq} size="small" variant="outlined" />
                        ))}
                      </Box>
                    </Box>
                  )}
                </Paper>
              </Grid>
            ))}
          </Grid>

          {/* Career Path Alignment */}
          {recommendations.careerPathAlignment && (
            <Accordion sx={{ mt: 3 }}>
              <AccordionSummary expandIcon={<ExpandMore />}>
                <Typography variant="h6">Career Path Alignment</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Typography>
                  {recommendations.careerPathAlignment}
                </Typography>
              </AccordionDetails>
            </Accordion>
          )}

          {/* Summer Recommendations */}
          {recommendations.summerRecommendations && recommendations.summerRecommendations.length > 0 && (
            <Accordion sx={{ mt: 1 }}>
              <AccordionSummary expandIcon={<ExpandMore />}>
                <Typography variant="h6">Summer Course Suggestions</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  {recommendations.summerRecommendations.map((course, index) => (
                    <Grid item xs={12} sm={6} key={index}>
                      <Card variant="outlined">
                        <CardContent>
                          <Typography variant="subtitle1" fontWeight="bold">
                            {course.courseCode}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {course.courseName}
                          </Typography>
                          <Typography variant="body2" sx={{ mt: 1 }}>
                            {course.reason}
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              </AccordionDetails>
            </Accordion>
          )}

          <Box mt={3}>
            <Button variant="outlined" onClick={fetchRecommendations} sx={{ mr: 2 }}>
              Refresh Recommendations
            </Button>
            <Button variant="text" size="small" color="text.secondary">
              These recommendations are AI-generated and should be verified with an academic advisor
            </Button>
          </Box>
        </CardContent>
      </Card>
    </Box>
  );
};

export default CourseRecommendations;